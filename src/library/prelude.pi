-- NOTE: Many of these functions could benefit from implicit arguments for
-- improved ergonomics. For example, the identity function could be written as:
--
-- ```
-- id : {a : Type} -> a -> a;
-- id x = x;
-- ```
--
-- This would then allow one to write:
--
-- ```
-- Pikelet> id "hello"
-- "hello" : String
-- ```

||| The polymorphic identity function
id : (a : Type) -> a -> a;
id a x = x;

||| Creates a function that always returns the same value
const : (a b : Type) -> a -> b -> a;
const a b x y = x;

||| Function composition
compose : (a b c : Type) -> (b -> c) -> (a -> b) -> (a -> c);
compose a b c f g x = f (g x);

||| Flip the order of the first two arguments to a function
flip : (a b c : Type) -> (a -> b -> c) -> (b -> a -> c);
flip a b c f x y = f y x;


||| Logical absurdity
|||
||| This type should have no inhabitants - if it does, it's a bug in our
||| type checker!
void : Type 1;
void = (a : Type) -> a;


||| Logical negation
not : Type -> Type 1;
not a = a -> void;


unit : Type 1;
unit = (a : Type) -> a -> a;

unit-intro : unit;
unit-intro = id;

unit-elim : (a : Type) -> unit -> a -> a;
unit-elim a f x = f a x;


||| Logical conjunction (Church encoded)
|||
||| You could also interpret this as a product type
and : Type -> Type -> Type 1;
and p q = (c : Type) -> (p -> q -> c) -> c;

||| Introduce a logical conjunction between two types
and-intro : (p q : Type) -> p -> q -> and p q;
and-intro p q x y c f = f x y;

-- FIXME: These don't type check - I might have got the definitions wrong, or
-- there is a bug in the type checker!

-- and-elim-left : (p q : Type) -> and p q -> p;
-- and-elim-left p q (pq : and p q) = pq p const;

-- and-elim-right : (p q : Type) -> and p q -> q;
-- and-elim-right p q (pq : and p q) = pq p (flip const);


||| Logical disjunction (Church encoded)
|||
||| You could also interpret this as a sum type
or : Type -> Type -> Type 1;
or p q = (c : Type) -> (p -> c) -> (q -> c) -> c;

-- FIXME: These don't type check - I might have got the definitions wrong, or
-- there is a bug in the type checker!

-- or-intro-left : (p q : Type) -> p -> or p q;
-- or-intro-left p q (x : p) c (on-p : p -> c) (on-q : q -> c) = on-p x;

-- or-intro-right : (p q : Type) -> q -> or p q;
-- or-intro-right p q (y : q) c (on-p : p -> c) (on-q : q -> c) = on-q y;


||| Dependent products
Prod : (A : Type) (B : A -> Type) -> Type;
Prod A B = (a : A) -> B a;

||| Dependent sums (subtypes)
Sum : (A : Type) (B : A -> Type) -> Type;
Sum A B = Record {
    val : A;
    proof : B val;
};


||| Module for defining equality between two terms
Eq (a : Type) = Record {
    ||| Compare two terms for equality
    eq : a -> a -> Bool;
};

||| Compare two terms for equality
eq : (a : Type) (EQ : Eq a) -> a -> a -> Bool;
eq _ EQ = EQ.eq;

Eq-String : Eq String = record { eq = prim-string-eq };
Eq-Char : Eq Char = record { eq = prim-char-eq };
Eq-Bool : Eq Bool = record { eq = prim-bool-eq };
Eq-U8 : Eq U8 = record { eq = prim-u8-eq };
Eq-U16 : Eq U16 = record { eq = prim-u16-eq };
Eq-U32 : Eq U32 = record { eq = prim-u32-eq };
Eq-U64 : Eq U64 = record { eq = prim-u64-eq };
Eq-I8 : Eq I8 = record { eq = prim-i8-eq };
Eq-I16 : Eq I16 = record { eq = prim-i16-eq };
Eq-I32 : Eq I32 = record { eq = prim-i32-eq };
Eq-I64 : Eq I64 = record { eq = prim-i64-eq };
Eq-F32 : Eq F32 = record { eq = prim-f32-eq };
Eq-F64 : Eq F64 = record { eq = prim-f64-eq };


||| An associative operation on `a`.
|||
||| This means the following laws must hold:
|||
||| ```
||| (a : Type) (S : Semigroup a) (x y z: a) ->
|||     S.append x (S.append y z) == S.append (S.append x y) z
||| ```
Semigroup (a : Type) = Record {
    ||| The associative operation
    append : a -> a -> a;

    -- TODO: Laws via property testing or proofs?
};

append : (a : Type) (S : Semigroup a) -> a -> a -> a;
append _ S = S.append;


Semigroup-String : Semigroup String = record { append = prim-string-append };

Semigroup-U8-Add : Semigroup U8 = record { append = prim-u8-add };
Semigroup-U16-Add : Semigroup U16 = record { append = prim-u16-add };
Semigroup-U32-Add : Semigroup U32 = record { append = prim-u32-add };
Semigroup-U64-Add : Semigroup U64 = record { append = prim-u64-add };
Semigroup-I8-Add : Semigroup I8 = record { append = prim-i8-add };
Semigroup-I16-Add : Semigroup I16 = record { append = prim-i16-add };
Semigroup-I32-Add : Semigroup I32 = record { append = prim-i32-add };
Semigroup-I64-Add : Semigroup I64 = record { append = prim-i64-add };
Semigroup-F32-Add : Semigroup F32 = record { append = prim-f32-add };
Semigroup-F64-Add : Semigroup F64 = record { append = prim-f64-add };

Semigroup-U8-Mul : Semigroup U8 = record { append = prim-u8-mul };
Semigroup-U16-Mul : Semigroup U16 = record { append = prim-u16-mul };
Semigroup-U32-Mul : Semigroup U32 = record { append = prim-u32-mul };
Semigroup-U64-Mul : Semigroup U64 = record { append = prim-u64-mul };
Semigroup-I8-Mul : Semigroup I8 = record { append = prim-i8-mul };
Semigroup-I16-Mul : Semigroup I16 = record { append = prim-i16-mul };
Semigroup-I32-Mul : Semigroup I32 = record { append = prim-i32-mul };
Semigroup-I64-Mul : Semigroup I64 = record { append = prim-i64-mul };
Semigroup-F32-Mul : Semigroup F32 = record { append = prim-f32-mul };
Semigroup-F64-Mul : Semigroup F64 = record { append = prim-f64-mul };


||| A semigroup that also has an identity.
|||
||| This means the following additional laws must hold:
|||
||| ```
||| (a : Type) (M : Monoid a) (x : a) -> M.semigroup.append x M.empty == x
||| (a : Type) (M : Monoid a) (x : a) -> M.semigroup.append M.empty x == x
||| ```
Monoid (a : Type) = Record {
    ||| The semigroup
    semigroup : Semigroup a;
    ||| The identity of `.semigroup.append`
    empty : a;

    -- TODO: Laws via property testing or proofs?
};

empty : (a : Type) (M : Monoid a) -> a;
empty _ M = M.empty;


Monoid-String : Monoid String = record { semigroup = Semigroup-String; empty = "" };

Monoid-U8-Add : Monoid U8 = record { semigroup = Semigroup-U8-Add; empty = 0 };
Monoid-U16-Add : Monoid U16 = record { semigroup = Semigroup-U16-Add; empty = 0 };
Monoid-U32-Add : Monoid U32 = record { semigroup = Semigroup-U32-Add; empty = 0 };
Monoid-U64-Add : Monoid U64 = record { semigroup = Semigroup-U64-Add; empty = 0 };
Monoid-I8-Add : Monoid I8 = record { semigroup = Semigroup-I8-Add; empty = 0 };
Monoid-I16-Add : Monoid I16 = record { semigroup = Semigroup-I16-Add; empty = 0 };
Monoid-I32-Add : Monoid I32 = record { semigroup = Semigroup-I32-Add; empty = 0 };
Monoid-I64-Add : Monoid I64 = record { semigroup = Semigroup-I64-Add; empty = 0 };
Monoid-F32-Add : Monoid F32 = record { semigroup = Semigroup-F32-Add; empty = 0 };
Monoid-F64-Add : Monoid F64 = record { semigroup = Semigroup-F64-Add; empty = 0 };

Monoid-U8-Mul : Monoid U8 = record { semigroup = Semigroup-U8-Mul; empty = 1 };
Monoid-U16-Mul : Monoid U16 = record { semigroup = Semigroup-U16-Mul; empty = 1 };
Monoid-U32-Mul : Monoid U32 = record { semigroup = Semigroup-U32-Mul; empty = 1 };
Monoid-U64-Mul : Monoid U64 = record { semigroup = Semigroup-U64-Mul; empty = 1 };
Monoid-I8-Mul : Monoid I8 = record { semigroup = Semigroup-I8-Mul; empty = 1 };
Monoid-I16-Mul : Monoid I16 = record { semigroup = Semigroup-I16-Mul; empty = 1 };
Monoid-I32-Mul : Monoid I32 = record { semigroup = Semigroup-I32-Mul; empty = 1 };
Monoid-I64-Mul : Monoid I64 = record { semigroup = Semigroup-I64-Mul; empty = 1 };
Monoid-F32-Mul : Monoid F32 = record { semigroup = Semigroup-F32-Mul; empty = 1 };
Monoid-F64-Mul : Monoid F64 = record { semigroup = Semigroup-F64-Mul; empty = 1 };


||| General trait for numeric types
Num (a : Type) = Record {
    ||| The additive monoid
    add : Monoid a;
    ||| The multiplicative monoid
    mul : Monoid a;

    -- TODO: Subtraction?
    -- TODO: Division?
    -- TODO: Lawfulness?
};

add : (a : Type) (N : Num a) -> a -> a -> a;
add a N = append a N.add.semigroup;

zero : (a : Type) (N : Num a) -> a;
zero a N = empty a N.add;

mul : (a : Type) (N : Num a) -> a -> a -> a;
mul a N = append a N.mul.semigroup;

one : (a : Type) (N : Num a) -> a;
one a N = empty a N.mul;


Num-U8-Add : Num U8 = record { add = Monoid-U8-Add; mul = Monoid-U8-Mul };
Num-U16-Add : Num U16 = record { add = Monoid-U16-Add; mul = Monoid-U16-Mul };
Num-U32-Add : Num U32 = record { add = Monoid-U32-Add; mul = Monoid-U32-Mul };
Num-U64-Add : Num U64 = record { add = Monoid-U64-Add; mul = Monoid-U64-Mul };
Num-I8-Add : Num I8 = record { add = Monoid-I8-Add; mul = Monoid-I8-Mul };
Num-I16-Add : Num I16 = record { add = Monoid-I16-Add; mul = Monoid-I16-Mul };
Num-I32-Add : Num I32 = record { add = Monoid-I32-Add; mul = Monoid-I32-Mul };
Num-I64-Add : Num I64 = record { add = Monoid-I64-Add; mul = Monoid-I64-Mul };
Num-F32-Add : Num F32 = record { add = Monoid-F32-Add; mul = Monoid-F32-Mul };
Num-F64-Add : Num F64 = record { add = Monoid-F64-Add; mul = Monoid-F64-Mul };


||| A category is a very general structure that provides a common way of composing
||| units of functionality
|||
||| The most common category programmers would be familiar with would be `Type`s
||| are the objects, and the functions between those types are the arrows. Many
||| other categories exist though, for example:
|||
||| - nodes in a directed graph, and the edges between those nodes.
||| - etc.
Category = Record {
    ||| An object in the category
    Object : Type 1; -- FIXME: universe polymorphism!
    ||| Arrows between the objects in the category
    Arrow : Object -> Object -> Type;
    ||| The identity arrow
    id : (a : Object) -> Arrow a a;
    ||| The sequencing of two arrows
    seq : (a b c : Object) -> Arrow a b -> Arrow b c -> Arrow a c;

    -- TODO: Laws via property testing or proofs?
    -- TODO: E-Category - ie. equivalence relation on morphisms?
    -- https://gist.github.com/brendanzab/9285eb8dfef5b6d6ccd87d90d6579590#gistcomment-2401643
};

||| The identity arrow
id : (C : Category) (a : C.Object) -> C.Arrow a a;
id C = C.id;

||| The sequencing of two arrows
seq : (C : Category) (a b c : C.Object) -> C.Arrow a b -> C.Arrow b c -> C.Arrow a c;
seq C = C.seq;

||| The composition of two arrows
compose : (C : Category) (a b c : C.Object) -> C.Arrow b c -> C.Arrow a b -> C.Arrow a c;
compose C a b c f g = seq C a b c g f;


Category-Function : Category = record {
    Object = Type;
    Arrow a b = a -> b;
    id (a : Type) (x : a) = x;
    seq (a b c : Type) (f : a -> b) (g : b -> c) (x : a) = g (f x);
};


||| Provides a mapping from objects-to-objects and arrows-to-arrows for two
||| categories, `Source` and `Target`
|||
||| Mappings can be anything from applying a function to each element of a
||| collection, to compiling a source language to a target language.
|||
||| Haskell programmers might find this definition a little foreign - this
||| is because we use general categories in the definition, rather than
||| specializing it into the category of Pikelet functions
Functor = Record {
    ||| The source category
    Source : Category;
    ||| The target category
    Target : Category;
    ||| Maps an object in `Source` to an object in `Target`
    Map : Source.Object -> Target.Object;
    ||| Maps an arrow in `Source` into an arrow in `Target`
    map : (a b : Source.Object) -> Source.Arrow a b -> Target.Arrow (Map a) (Map b);

    -- TODO: Laws via property testing or proofs?
};

||| Maps an arrow in `F.Source` into an arrow in `F.Target`
map : (F : Functor) (a b : F.Source.Object) -> F.Source.Arrow a b -> F.Target.Arrow (F.Map a) (F.Map b);
map F = F.map;


Endofunctor-Function : Functor = record {
    Source = Category-Function;
    Target = Category-Function;
    Map x = x;
    map (a b : Type) (f : a -> b) (x : a) = f x;
};
